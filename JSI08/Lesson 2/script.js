// B√†i 1:

// Thi·∫øt l·∫≠p l·ªõp PhanSo ƒë·ªÉ bi·ªÉu di·ªÖn kh√°i ni·ªám ph√¢n s·ªë v·ªõi hai th√†nh ph·∫ßn d·ªØ li·ªáu t·ª≠ s·ªë, m·∫´u s·ªë v√† c√°c h√†m th√†nh ph·∫ßn c·ªông, tr·ª´, nh√¢n, chia hai ph√¢n s·ªë, c√°c h√†m th√†nh ph·∫ßn xu·∫•t, nh·∫≠p, ƒë·ªãnh gi√° tr·ªã cho ph√¢n s·ªë. Vi·∫øt ch∆∞∆°ng tr√¨nh cho ph√©p nh·∫≠p v√†o hai ph√¢n s·ªë, in ra k·∫øt qu·∫£ c√°c ph√©p to√°n c·ªông, tr·ª´, nh√¢n, chia hai ph√¢n s·ªë k·ªÉ tr√™n.


// class PhanSo {
//     constructor(tuso,mauso) {
//         this.tuso = tuso
//         this.mauso = mauso
//     }


//     add(phanSo2) {
//         return new PhanSo(this.tuso*phanSo2.mauso + phanSo2.tuso*this.mauso,this.mauso*phanSo2.mauso)
//     }
//     mul(phanSo2) {
//         return new PhanSo(this.tuso*phanSo2.tuso, this.mauso*phanSo2.mauso)
//     }

//     sub(phanSo2) {
//         return new PhanSo(this.tuso*phanSo2.mauso - phanSo2.tuso*this.mauso,this.mauso*phanSo2.mauso)
//     }
//     div(phanSo2) {
//         return new PhanSo(this.tuso*phanSo2.mauso, this.mauso*phanSo2.tuso)
//     }
    // rutGon(){
    //     let c = Math.abs(this.tuso);
    //     let d = Math.abs(this.mauso);
    //     while(d != 0){
    //     let e = c%d;
    //     c = d;
    //     d = e;
    //     }
    //     return new PhanSo(this.tuso/c, this.mauso/c)
    // }
//     show() {
//       console.log(`${this.tuso}/${this.mauso}`)
//     }
// }

//   let phanSo1 = new PhanSo(6,9)
//   let phanSo2 = new PhanSo(5,4)
//   let result1 = phanSo1.mul(phanSo2)
//   let result = result1.rutGon()
//   result.show()

//   B√†i 2:

//   X√¢y d·ª±ng l·ªõp Candidate (Th√≠ sinh) g·ªìm c√°c thu·ªôc t√≠nh: m√£, t√™n, ng√†y th√°ng nƒÉm sinh, ƒëi·ªÉm thi To√°n, VƒÉn, Anh v√† c√°c ph∆∞∆°ng th·ª©c c·∫ßn thi·∫øt.

//   X√¢y d·ª±ng l·ªõp TestCandidate ƒë·ªÉ ki·ªÉm tra l·ªõp tr√™n:

//   ‚Äì Nh·∫≠p v√†o n th√≠ sinh (n do ng∆∞·ªùi d√πng nh·∫≠p)

//   ‚Äì In ra th√¥ng tin v·ªÅ c√°c th√≠ sinh c√≥ t·ªïng ƒëi·ªÉm l·ªõn h∆°n 15

class hocSinh{
    constructor(){
        this.student = [];
    }
    Input() {
		const num = parseInt(
			prompt("S·ªë l∆∞·ª£ng h·ªçc sinh: ")
		);
		for (let i = 0; i < num; i++) {
			let code = i+1;
			let name = prompt("T√™n: ");
			let dob = prompt("Ng√†y th√°ng nƒÉm sinh: ");
			let toan = parseFloat(prompt("ƒêi·ªÉm to√°n: "));
			let anh = parseFloat(prompt("ƒêi·ªÉm ti·∫øng Anh: "));
			let van = parseFloat(prompt("ƒêi·ªÉm vƒÉn: "));
			let tongDiem = toan + anh + van;
			this.student.push({ code, name, dob, toan, anh, van, tongDiem });
		}
        for (let i = 0; i<num; i++){
            if (this.student[i].tongDiem > 15){
                console.log(this.student[i]);
            }
        }
    }
}
const a = new hocSinh();
console.log("H·ªçc sinh c√≥ s·ªë ƒëi·ªÉm l·ªõn h∆°n 15: ");
a.Input();

// *B√†i 3:
// Ng√¢n h√†ng ABC mu·ªën l∆∞u tr·ªØ th√¥ng tin c·ªßa m·ªói t√†i kho·∫£n nh∆∞ sau:

// M·ªói t√†i kho·∫£n ch·ª©a c√°c th√¥ng tin:

// S·ªë t√†i kho·∫£n 
// T√™n t√†i kho·∫£n 
// S·ªë ti·ªÅn trong t√†i kho·∫£n 
// Thi·∫øt k·∫ø l·ªõp Account ƒë·ªÉ l∆∞u tr·ªØ c√°c th√¥ng tin, l·ªõp bao g·ªìm c√°c ph∆∞∆°ng th·ª©c sau:

// Constructor
// C√°c ph∆∞∆°ng th·ª©c get, set cho t·ª´ng thu·ªôc t√≠nh
// Ph∆∞∆°ng th·ª©c toString ƒë·ªÉ tr·∫£ v·ªÅ chu·ªói ch·ª©a to√†n b·ªô th√¥ng tin t√†i kho·∫£n, y√™u c·∫ßu ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá.
// Th√™m c√°c th√¥ng tin sau v√†o l·ªõp Account:

// H·∫±ng s·ªë l√£i su·∫•t c√≥ gi√° tr·ªã kh·ªüi t·∫°o 0.035
// Constructor c√≥ 2 ƒë·ªëi s·ªë: s·ªë t√†i kho·∫£n, t√™n t√†i kho·∫£n. Constructor n√†y s·∫Ω kh·ªüi t·∫°o s·ªë ti·ªÅn m·∫∑c ƒë·ªãnh l√† 50
// Ph∆∞∆°ng th·ª©c n·∫°p ti·ªÅn v√†o t√†i kho·∫£n: L·∫•y s·ªë ti·ªÅn hi·ªán t·∫°i trong t√†i kho·∫£n + s·ªë ti·ªÅn n·∫°p v√†o
// Ph∆∞∆°ng th·ª©c r√∫t ti·ªÅn: L·∫•y s·ªë ti·ªÅn hi·ªán t·∫°i trong t√†i kho·∫£n ‚Äì (s·ªë ti·ªÅn mu·ªën r√∫t+ph√≠ r√∫tti·ªÅn)
// Ph∆∞∆°ng th·ª©c ƒë√°o h·∫°n: M·ªói l·∫ßn ƒë·∫øn k·ª≥ ƒë√°o h·∫°n th√¨ s·ªë ti·ªÅn trong t√†i kho·∫£n = s·ªë ti·ªÅn trong t√†i kho·∫£n + s·ªë ti·ªÅn trong t√†i kho·∫£n * LAISUAT
// Ph∆∞∆°ng th·ª©c chuy·ªÉn kho·∫£n t·ª´ t√†i kho·∫£n n√†y sang t√†i kho·∫£n kh√°c
// Ch√∫ √Ω: M·ªói thao t√°c ph·∫£i ki·ªÉm tra s·ªë ti·ªÅn n·∫°p, r√∫t, chuy·ªÉn c√≥ h·ª£p l·ªá hay kh√¥ng? (VD: ti·ªÅn nh·∫≠p v√†o <0, ti·ªÅn r√∫t nhi·ªÅu h∆°n ti·ªÅn trong t√†i kho·∫£n th√¨ th√¥ng b√°o kh√¥ng h·ª£p l·ªá v√† y√™u c·∫ßu nh·∫≠p l·∫°i)

class Account {
    constructor() {
        this.LAISUAT = 0.035;
        this.users = []
    }
    createAccount() {

        let name = prompt("T√™n t√†i kho·∫£n: ");
        let balance = parseInt(prompt("S·ªë d∆∞: "));

        const userData = {
            name,
            balance,
            tradeInDay: 0
        };
        this.users.push(userData);
        this.start(userData);
    }
    start(userData) {
        this.users.forEach(user => {
            {
                if (user.tradeInDay === 5) {
                    console.log(
                        "-----> ƒê√°o h·∫°n c√°i g√¨ ƒë√≥, check l·∫°i th√¥ng tin gi√πm c√°i <-----"
                    );
                    user.tradeInDay = 0;
                    user.balance = user.balance * this.LAISUAT;
                }
            }
        });
        console.log(`
			[0]. Xem th√¥ng tin
			[1]. N·∫°p xi·ªÅn
			[2]. Chuy·ªÉn xi·ªÅn
			[3]. R√∫t xi·ªÅn
		`);
        const choice = prompt("Ch·ªçn ƒë√™");

        switch (choice) {
            case "0":
                this.WatchAccount(userData);
                return false;
            case "1":
                this.Recharge(userData);
                return false;
            case "2":
                this.Transfers(userData);
                return false;
            case "3":
                this.Withdraw(userData);
                return false;
            default:
                console.error("ƒêm ch·ªçn ngu vl   ");
                console.log(this.users);
        }
    }
    WatchAccount(userData) {
        console.log(`
		----> Th√¥ng tin <-----
		1. T√™n: ${userData.name}
		2. S·ªë d∆∞: ${userData.balance}
		3. Giao d·ªãch trong ng√†y: ${userData.tradeInDay}
		`);
        this.users.forEach(user => {
            {
                user.tradeInDay += 1;
            }
        });

        this.start(userData);
    }

    Recharge(userData) {
        console.log("----> N·∫°p xi·ªÅn üí¥ <----");
        const moneyRecharge = parseInt(
            prompt("N·∫°p bao xi·ªÅn? ")
        );
        if (moneyRecharge !== undefined || moneyRecharge !== null || moneyRecharge !== "" || moneyRecharge !== " ") {
            console.log(
                `----->ƒê√£ n·∫°p th√†nh c√¥ng $${moneyRecharge} !! <-----`
            );
            this.users.forEach(user => {
                if (
                    user.password === userData.password &&
                    user.name === userData.name
                ) {
                    user.balance += moneyRecharge;
                    user.tradeInDay += 1;
                }
            });
            this.start(userData);
        }
        else {
            console.log(
                "-----> C√≥ g√¨ ƒë√≥ sai sai... <-----"
            );
        }
    }
    Transfers(userData) {
        const userTransfers = prompt(
            "T√™n t√†i kho·∫£n nh·∫≠n ti·ªÅn? "
        );
        if (
            !userTransfers ||
            userTransfers.length === 0 ||
            userTransfers === "" ||
            userTransfers === " "
        ) {
            console.log("-----> Nh·∫≠p l·∫°i ƒë√™ <----");
        } else {
            let userTransfer = this.users.find(user => {
                if (user.name === userTransfers) {
                    return user;
                }
            });
            if (userTransfer) {
                let moneyTransfers = parseInt(
                    prompt("Chuy·ªÉn nhi√™u?")
                );
                while (moneyTransfers > userData.balance) {
                    console.log(
                        "-----> M√†y nghƒ© m√†y ƒë·ªß ti·ªÅn √†...? <-----"
                    );
                    moneyTransfers = parseInt(
                        prompt("Chuy·ªÉn nhi√™u?")
                    );
                }

                userData.balance -= moneyTransfers;
                userTransfer.balance += moneyTransfers;
                userData.tradeInDay += 1;
                console.log(
                    `-----> Transfers $${moneyTransfers} successfully to ${userTransfer.name}!! Your money has increased to ${userData.balance} <------`
                );
                this.start(userData);

            }
        }
    }
    Withdraw(userData) {
        const moneyWithdraw = parseInt(
            prompt("R√∫t nhi√™u?")
        );
        if (userData.balance < moneyWithdraw) {
            console.log(
                "-----> ƒêm l·∫°i ·∫£o t∆∞·ªüng <-----"
            );
            this.Withdraw(userData);
        } else {
            userData.balance -= moneyWithdraw;
            userData.tradeInDay += 1;
            console.log("-----> Withdraw successfully!!!!!!!! <----");
            this.start(userData);
        }
    }
    
}
const Bai3 = new Account();
Bai3.createAccount();


